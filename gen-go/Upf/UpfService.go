// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package Upf

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//  - RxPktCnt
//  - RxPktDropCnt
//  - TxNQfiPktCnt
//  - TxNQfiPktDropCnt
//  - TxPktCnt
//  - TxPktDropCnt
//  - DropperPkts
//  - DropperDrops
//  - SchedulerQDropCnt
type PortStats struct {
  RxPktCnt []int32 `thrift:"rxPktCnt,1,required" db:"rxPktCnt" json:"rxPktCnt"`
  RxPktDropCnt []int32 `thrift:"rxPktDropCnt,2,required" db:"rxPktDropCnt" json:"rxPktDropCnt"`
  TxNQfiPktCnt int32 `thrift:"txNQfiPktCnt,3,required" db:"txNQfiPktCnt" json:"txNQfiPktCnt"`
  TxNQfiPktDropCnt int32 `thrift:"txNQfiPktDropCnt,4,required" db:"txNQfiPktDropCnt" json:"txNQfiPktDropCnt"`
  TxPktCnt []int32 `thrift:"txPktCnt,5,required" db:"txPktCnt" json:"txPktCnt"`
  TxPktDropCnt []int32 `thrift:"txPktDropCnt,6,required" db:"txPktDropCnt" json:"txPktDropCnt"`
  DropperPkts [][]int32 `thrift:"dropperPkts,7,required" db:"dropperPkts" json:"dropperPkts"`
  DropperDrops [][]int32 `thrift:"dropperDrops,8,required" db:"dropperDrops" json:"dropperDrops"`
  SchedulerQDropCnt []int32 `thrift:"schedulerQDropCnt,9,required" db:"schedulerQDropCnt" json:"schedulerQDropCnt"`
}

func NewPortStats() *PortStats {
  return &PortStats{}
}


func (p *PortStats) GetRxPktCnt() []int32 {
  return p.RxPktCnt
}

func (p *PortStats) GetRxPktDropCnt() []int32 {
  return p.RxPktDropCnt
}

func (p *PortStats) GetTxNQfiPktCnt() int32 {
  return p.TxNQfiPktCnt
}

func (p *PortStats) GetTxNQfiPktDropCnt() int32 {
  return p.TxNQfiPktDropCnt
}

func (p *PortStats) GetTxPktCnt() []int32 {
  return p.TxPktCnt
}

func (p *PortStats) GetTxPktDropCnt() []int32 {
  return p.TxPktDropCnt
}

func (p *PortStats) GetDropperPkts() [][]int32 {
  return p.DropperPkts
}

func (p *PortStats) GetDropperDrops() [][]int32 {
  return p.DropperDrops
}

func (p *PortStats) GetSchedulerQDropCnt() []int32 {
  return p.SchedulerQDropCnt
}
func (p *PortStats) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRxPktCnt bool = false;
  var issetRxPktDropCnt bool = false;
  var issetTxNQfiPktCnt bool = false;
  var issetTxNQfiPktDropCnt bool = false;
  var issetTxPktCnt bool = false;
  var issetTxPktDropCnt bool = false;
  var issetDropperPkts bool = false;
  var issetDropperDrops bool = false;
  var issetSchedulerQDropCnt bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRxPktCnt = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetRxPktDropCnt = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetTxNQfiPktCnt = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetTxNQfiPktDropCnt = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetTxPktCnt = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetTxPktDropCnt = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
        issetDropperPkts = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
        issetDropperDrops = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
        issetSchedulerQDropCnt = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRxPktCnt{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RxPktCnt is not set"));
  }
  if !issetRxPktDropCnt{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RxPktDropCnt is not set"));
  }
  if !issetTxNQfiPktCnt{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TxNQfiPktCnt is not set"));
  }
  if !issetTxNQfiPktDropCnt{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TxNQfiPktDropCnt is not set"));
  }
  if !issetTxPktCnt{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TxPktCnt is not set"));
  }
  if !issetTxPktDropCnt{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TxPktDropCnt is not set"));
  }
  if !issetDropperPkts{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DropperPkts is not set"));
  }
  if !issetDropperDrops{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DropperDrops is not set"));
  }
  if !issetSchedulerQDropCnt{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SchedulerQDropCnt is not set"));
  }
  return nil
}

func (p *PortStats)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.RxPktCnt =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.RxPktCnt = append(p.RxPktCnt, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PortStats)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.RxPktDropCnt =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.RxPktDropCnt = append(p.RxPktDropCnt, _elem1)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PortStats)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TxNQfiPktCnt = v
}
  return nil
}

func (p *PortStats)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TxNQfiPktDropCnt = v
}
  return nil
}

func (p *PortStats)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.TxPktCnt =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.TxPktCnt = append(p.TxPktCnt, _elem2)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PortStats)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.TxPktDropCnt =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.TxPktDropCnt = append(p.TxPktDropCnt, _elem3)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PortStats)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]int32, 0, size)
  p.DropperPkts =  tSlice
  for i := 0; i < size; i ++ {
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]int32, 0, size)
    _elem4 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem5 int32
      if v, err := iprot.ReadI32(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem5 = v
}
      _elem4 = append(_elem4, _elem5)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.DropperPkts = append(p.DropperPkts, _elem4)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PortStats)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]int32, 0, size)
  p.DropperDrops =  tSlice
  for i := 0; i < size; i ++ {
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]int32, 0, size)
    _elem6 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem7 int32
      if v, err := iprot.ReadI32(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem7 = v
}
      _elem6 = append(_elem6, _elem7)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.DropperDrops = append(p.DropperDrops, _elem6)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PortStats)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.SchedulerQDropCnt =  tSlice
  for i := 0; i < size; i ++ {
var _elem8 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem8 = v
}
    p.SchedulerQDropCnt = append(p.SchedulerQDropCnt, _elem8)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PortStats) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PortStats"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PortStats) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rxPktCnt", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rxPktCnt: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.RxPktCnt)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RxPktCnt {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rxPktCnt: ", p), err) }
  return err
}

func (p *PortStats) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rxPktDropCnt", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rxPktDropCnt: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.RxPktDropCnt)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RxPktDropCnt {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rxPktDropCnt: ", p), err) }
  return err
}

func (p *PortStats) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "txNQfiPktCnt", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:txNQfiPktCnt: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TxNQfiPktCnt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.txNQfiPktCnt (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:txNQfiPktCnt: ", p), err) }
  return err
}

func (p *PortStats) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "txNQfiPktDropCnt", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:txNQfiPktDropCnt: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TxNQfiPktDropCnt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.txNQfiPktDropCnt (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:txNQfiPktDropCnt: ", p), err) }
  return err
}

func (p *PortStats) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "txPktCnt", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:txPktCnt: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.TxPktCnt)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TxPktCnt {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:txPktCnt: ", p), err) }
  return err
}

func (p *PortStats) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "txPktDropCnt", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:txPktDropCnt: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.TxPktDropCnt)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TxPktDropCnt {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:txPktDropCnt: ", p), err) }
  return err
}

func (p *PortStats) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dropperPkts", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dropperPkts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.LIST, len(p.DropperPkts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.DropperPkts {
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dropperPkts: ", p), err) }
  return err
}

func (p *PortStats) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dropperDrops", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:dropperDrops: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.LIST, len(p.DropperDrops)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.DropperDrops {
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:dropperDrops: ", p), err) }
  return err
}

func (p *PortStats) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "schedulerQDropCnt", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:schedulerQDropCnt: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.SchedulerQDropCnt)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SchedulerQDropCnt {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:schedulerQDropCnt: ", p), err) }
  return err
}

func (p *PortStats) Equals(other *PortStats) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.RxPktCnt) != len(other.RxPktCnt) { return false }
  for i, _tgt := range p.RxPktCnt {
    _src9 := other.RxPktCnt[i]
    if _tgt != _src9 { return false }
  }
  if len(p.RxPktDropCnt) != len(other.RxPktDropCnt) { return false }
  for i, _tgt := range p.RxPktDropCnt {
    _src10 := other.RxPktDropCnt[i]
    if _tgt != _src10 { return false }
  }
  if p.TxNQfiPktCnt != other.TxNQfiPktCnt { return false }
  if p.TxNQfiPktDropCnt != other.TxNQfiPktDropCnt { return false }
  if len(p.TxPktCnt) != len(other.TxPktCnt) { return false }
  for i, _tgt := range p.TxPktCnt {
    _src11 := other.TxPktCnt[i]
    if _tgt != _src11 { return false }
  }
  if len(p.TxPktDropCnt) != len(other.TxPktDropCnt) { return false }
  for i, _tgt := range p.TxPktDropCnt {
    _src12 := other.TxPktDropCnt[i]
    if _tgt != _src12 { return false }
  }
  if len(p.DropperPkts) != len(other.DropperPkts) { return false }
  for i, _tgt := range p.DropperPkts {
    _src13 := other.DropperPkts[i]
    if len(_tgt) != len(_src13) { return false }
    for i, _tgt := range _tgt {
      _src14 := _src13[i]
      if _tgt != _src14 { return false }
    }
  }
  if len(p.DropperDrops) != len(other.DropperDrops) { return false }
  for i, _tgt := range p.DropperDrops {
    _src15 := other.DropperDrops[i]
    if len(_tgt) != len(_src15) { return false }
    for i, _tgt := range _tgt {
      _src16 := _src15[i]
      if _tgt != _src16 { return false }
    }
  }
  if len(p.SchedulerQDropCnt) != len(other.SchedulerQDropCnt) { return false }
  for i, _tgt := range p.SchedulerQDropCnt {
    _src17 := other.SchedulerQDropCnt[i]
    if _tgt != _src17 { return false }
  }
  return true
}

func (p *PortStats) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PortStats(%+v)", *p)
}

// Attributes:
//  - ErrCode
//  - ErrMsg
//  - Stats
type StatsResponse struct {
  ErrCode int32 `thrift:"errCode,1,required" db:"errCode" json:"errCode"`
  ErrMsg string `thrift:"errMsg,2,required" db:"errMsg" json:"errMsg"`
  Stats *PortStats `thrift:"stats,3,required" db:"stats" json:"stats"`
}

func NewStatsResponse() *StatsResponse {
  return &StatsResponse{}
}


func (p *StatsResponse) GetErrCode() int32 {
  return p.ErrCode
}

func (p *StatsResponse) GetErrMsg() string {
  return p.ErrMsg
}
var StatsResponse_Stats_DEFAULT *PortStats
func (p *StatsResponse) GetStats() *PortStats {
  if !p.IsSetStats() {
    return StatsResponse_Stats_DEFAULT
  }
return p.Stats
}
func (p *StatsResponse) IsSetStats() bool {
  return p.Stats != nil
}

func (p *StatsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrCode bool = false;
  var issetErrMsg bool = false;
  var issetStats bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetErrCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetErrMsg = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetStats = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrCode is not set"));
  }
  if !issetErrMsg{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrMsg is not set"));
  }
  if !issetStats{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Stats is not set"));
  }
  return nil
}

func (p *StatsResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrCode = v
}
  return nil
}

func (p *StatsResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrMsg = v
}
  return nil
}

func (p *StatsResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Stats = &PortStats{}
  if err := p.Stats.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Stats), err)
  }
  return nil
}

func (p *StatsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StatsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StatsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ErrCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errCode: ", p), err) }
  return err
}

func (p *StatsResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errMsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errMsg: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ErrMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errMsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errMsg: ", p), err) }
  return err
}

func (p *StatsResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stats", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stats: ", p), err) }
  if err := p.Stats.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Stats), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stats: ", p), err) }
  return err
}

func (p *StatsResponse) Equals(other *StatsResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ErrCode != other.ErrCode { return false }
  if p.ErrMsg != other.ErrMsg { return false }
  if !p.Stats.Equals(other.Stats) { return false }
  return true
}

func (p *StatsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StatsResponse(%+v)", *p)
}

type UpfService interface {
  // Parameters:
  //  - Port
  GetStats(ctx context.Context, port int32) (_r *StatsResponse, _err error)
  // Parameters:
  //  - Port
  ClearStats(ctx context.Context, port int32) (_err error)
}

type UpfServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewUpfServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UpfServiceClient {
  return &UpfServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUpfServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UpfServiceClient {
  return &UpfServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUpfServiceClient(c thrift.TClient) *UpfServiceClient {
  return &UpfServiceClient{
    c: c,
  }
}

func (p *UpfServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *UpfServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *UpfServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Port
func (p *UpfServiceClient) GetStats(ctx context.Context, port int32) (_r *StatsResponse, _err error) {
  var _args18 UpfServiceGetStatsArgs
  _args18.Port = port
  var _result20 UpfServiceGetStatsResult
  var _meta19 thrift.ResponseMeta
  _meta19, _err = p.Client_().Call(ctx, "GetStats", &_args18, &_result20)
  p.SetLastResponseMeta_(_meta19)
  if _err != nil {
    return
  }
  if _ret21 := _result20.GetSuccess(); _ret21 != nil {
    return _ret21, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "GetStats failed: unknown result")
}

// Parameters:
//  - Port
func (p *UpfServiceClient) ClearStats(ctx context.Context, port int32) (_err error) {
  var _args22 UpfServiceClearStatsArgs
  _args22.Port = port
  var _result24 UpfServiceClearStatsResult
  var _meta23 thrift.ResponseMeta
  _meta23, _err = p.Client_().Call(ctx, "ClearStats", &_args22, &_result24)
  p.SetLastResponseMeta_(_meta23)
  if _err != nil {
    return
  }
  return nil
}

type UpfServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UpfService
}

func (p *UpfServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UpfServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UpfServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUpfServiceProcessor(handler UpfService) *UpfServiceProcessor {

  self25 := &UpfServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self25.processorMap["GetStats"] = &upfServiceProcessorGetStats{handler:handler}
  self25.processorMap["ClearStats"] = &upfServiceProcessorClearStats{handler:handler}
return self25
}

func (p *UpfServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x26 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x26.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x26

}

type upfServiceProcessorGetStats struct {
  handler UpfService
}

func (p *upfServiceProcessorGetStats) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UpfServiceGetStatsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "GetStats", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UpfServiceGetStatsResult{}
  var retval *StatsResponse
  if retval, err2 = p.handler.GetStats(ctx, args.Port); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetStats: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "GetStats", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "GetStats", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type upfServiceProcessorClearStats struct {
  handler UpfService
}

func (p *upfServiceProcessorClearStats) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UpfServiceClearStatsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ClearStats", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UpfServiceClearStatsResult{}
  if err2 = p.handler.ClearStats(ctx, args.Port); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ClearStats: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "ClearStats", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "ClearStats", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Port
type UpfServiceGetStatsArgs struct {
  Port int32 `thrift:"port,1,required" db:"port" json:"port"`
}

func NewUpfServiceGetStatsArgs() *UpfServiceGetStatsArgs {
  return &UpfServiceGetStatsArgs{}
}


func (p *UpfServiceGetStatsArgs) GetPort() int32 {
  return p.Port
}
func (p *UpfServiceGetStatsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPort bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetPort = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPort{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Port is not set"));
  }
  return nil
}

func (p *UpfServiceGetStatsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *UpfServiceGetStatsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetStats_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpfServiceGetStatsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "port", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:port: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:port: ", p), err) }
  return err
}

func (p *UpfServiceGetStatsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpfServiceGetStatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UpfServiceGetStatsResult struct {
  Success *StatsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUpfServiceGetStatsResult() *UpfServiceGetStatsResult {
  return &UpfServiceGetStatsResult{}
}

var UpfServiceGetStatsResult_Success_DEFAULT *StatsResponse
func (p *UpfServiceGetStatsResult) GetSuccess() *StatsResponse {
  if !p.IsSetSuccess() {
    return UpfServiceGetStatsResult_Success_DEFAULT
  }
return p.Success
}
func (p *UpfServiceGetStatsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UpfServiceGetStatsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpfServiceGetStatsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &StatsResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UpfServiceGetStatsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetStats_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpfServiceGetStatsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UpfServiceGetStatsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpfServiceGetStatsResult(%+v)", *p)
}

// Attributes:
//  - Port
type UpfServiceClearStatsArgs struct {
  Port int32 `thrift:"port,1,required" db:"port" json:"port"`
}

func NewUpfServiceClearStatsArgs() *UpfServiceClearStatsArgs {
  return &UpfServiceClearStatsArgs{}
}


func (p *UpfServiceClearStatsArgs) GetPort() int32 {
  return p.Port
}
func (p *UpfServiceClearStatsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPort bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetPort = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPort{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Port is not set"));
  }
  return nil
}

func (p *UpfServiceClearStatsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *UpfServiceClearStatsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ClearStats_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpfServiceClearStatsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "port", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:port: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:port: ", p), err) }
  return err
}

func (p *UpfServiceClearStatsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpfServiceClearStatsArgs(%+v)", *p)
}

type UpfServiceClearStatsResult struct {
}

func NewUpfServiceClearStatsResult() *UpfServiceClearStatsResult {
  return &UpfServiceClearStatsResult{}
}

func (p *UpfServiceClearStatsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpfServiceClearStatsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ClearStats_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpfServiceClearStatsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpfServiceClearStatsResult(%+v)", *p)
}


